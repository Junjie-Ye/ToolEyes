import requests
import ipaddress
    

def is_ip_valid(ip: str):
    try:
        ipaddress.IPv4Address(ip)
        return True
    except:
        pass

    try:
        ipaddress.IPv6Address(ip)
        return True
    except:
        pass

    return False
    

def get_response(url, headers, **kargs):
    try:
        response = requests.get(url, headers=headers, params=kargs)
    except:
        return {"error": "connection error."}
    try:
        observation = response.json()
    except:
        observation = response.text
    return observation


def check_ip(ipAddress:str, maxAgelnDays:int = 30, api_key:str = ''):
    if not is_ip_valid(ipAddress):
        return {"error": "The ip address does not meet specifications."}
    url = 'https://api.abuseipdb.com/api/v2/check'
    headers = {
        'Accept': 'application/json',
        'Key': api_key
    }

    return get_response(url=url, headers=headers, ipAddress=ipAddress, maxAgelnDays=maxAgelnDays)


def blacklist_ip(confidenceMininum:int = 90, limit:int = 20, onlyCountries:str = None, exceptCountries:str=None, ipVersion:int=4, api_key:str = ''):
    url = 'https://api.abuseipdb.com/api/v2/blacklist'
    headers = {
        'Accept': 'application/json',
        'Key': api_key
    }

    return get_response(url=url, headers=headers, confidenceMinimum=confidenceMininum, limit=limit, onlyCountries=onlyCountries, exceptCountries=exceptCountries, ipVersion=ipVersion)


def check_block_ip(network:str, maxAgelnDays:int = 30, api_key : str = ''):
    url = 'https://api.abuseipdb.com/api/v2/check-block'
    headers = {
        'Accept': 'application/json',
        'Key': api_key
    }

    return get_response(url=url, headers=headers, network=network, maxAgelnDays=maxAgelnDays)


def blacklist_url(limit:int = 3):
    url = f'https://urlhaus-api.abuse.ch/v1/urls/recent/limit/{limit}/'
    try:
        response = requests.get(url)
    except:
        return {"error": "connection error."}
    try:
        observation = response.json()
    except:
        observation = response.text
    return observation


def query_payloads(limit:int = 3):
    url = f'https://urlhaus-api.abuse.ch/v1/payloads/recent/limit/{limit}'
    try:
        response = requests.get(url)
    except:
        return{"error": "connection error."} 
    
    try:
        observation = response.json()
    except:
        observation = response.text

    return observation


def query_url(q_url:str):
    url = 'https://urlhaus-api.abuse.ch/v1/url/'
    data = {
        'url': q_url
    }

    try:
        response = requests.post(url,data)
    except:
        return {"error": "connection error."}
    
    try:
        observation = response.json()
    except:
        observation = response.text

    return observation


def query_host(host:str):
    url = 'https://urlhaus-api.abuse.ch/v1/host/'
    data = {
        "host": host
    }

    try:
        response = requests.post(url, data)
    except:
        return {"error": "connection error."}
    
    try:
        observation = response.json()
    except:
        observation = response.text

    return observation


if __name__ == '__main__':
    # print(check_ip('118.25.6.39'))
    # print(blacklist_ip())
    # print(check_block_ip('127.0.0.1/24'))
    # print(blacklist_url())
    # print(query_payloads(2))
    # print(query_url('http://sskymedia.com/VMYB-ht_JAQo-gi/INV/99401FORPO/20673114777/US/Outstanding-Invoices/'))
    # print(query_host('vektorex.com'))
    pass