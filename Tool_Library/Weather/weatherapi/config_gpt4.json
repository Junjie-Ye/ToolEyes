[{"name": "current_weather", "description": "Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object which contains current or realtime weather information for the given city", "parameters": {"type": "object", "properties": {"q": {"type": "string", "description": "Query parameter based on which data is sent back. It could be following:1.Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508\n2.city name e.g.: q=Paris\n3.US zip e.g.: q=10001\n4.UK postcode e.g: q=SW1\n5.Canada postal code e.g: q=G2J\n6.metar:<metar code> e.g: q=metar:EGLL\n7.iata:<3 digit airport code> e.g: q=iata:DXB\n8.auto:ip IP lookup e.g: q=auto:ip\n9.IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1."}, "api_key": {"type": "string", "description": "API Key."}, "lang": {"type": "string", "description": "Returns 'condition:text' field in API in the desired language."}}, "required": ["q"]}}, {"name": "forecast", "description": "Forecast weather API method returns, depending upon your price plan level, upto next 14 day weather forecast and weather alert as json. The data is returned as a Forecast Object.Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city. ", "parameters": {"type": "object", "properties": {"q": {"type": "string", "description": "Query parameter based on which data is sent back. It could be following:1.Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508\n2.city name e.g.: q=Paris\n3.US zip e.g.: q=10001\n4.UK postcode e.g: q=SW1\n5.Canada postal code e.g: q=G2J\n6.metar:<metar code> e.g: q=metar:EGLL\n7.iata:<3 digit airport code> e.g: q=iata:DXB\n8.auto:ip IP lookup e.g: q=auto:ip\n9.IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1."}, "api_key": {"type": "string", "description": "API Key."}, "lang": {"type": "string", "description": "Returns 'condition:text' field in API in the desired language."}, "days": {"type": "string", "description": "Number of days of forecast required.Days parameter value ranges between 1 and 14.( e.g: days=5)If no days parameter is provided then only today's weather is returned."}, "dt": {"type": "string", "description": "Restrict date output for Forecast and History API method.For forecast API 'dt' should be between today and next 14 day in yyyy-MM-dd format (i.e. dt=2010-01-01)."}, "unixdt": {"type": "string", "description": "Unix Timestamp used by Forecast and History API method.Same function as dt.Unixdt has same restriction as 'dt' parameter. Please either pass 'dt' or 'unixdt' and not both in same request. e.g.: unixdt=1490227200."}, "alerts": {"type": "string", "description": "Disable alerts in forecast API output."}, "aqi": {"type": "string", "description": "Enable/Disable Air Quality data in forecast API output."}, "tp": {"type": "string", "description": "Get 15 min interval data for Forecast and History API. Available for Enterprise clients only."}, "hour": {"type": "string", "description": "Restricting forecast or history output to a specific hour in a given day.Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6."}}, "required": ["q", "days", "aqi"]}}, {"name": "history", "description": "History weather API method returns, depending upon your price plan level, historical weather for a date on or after 1st Jan, 2010 as json(free plan only gets the past seven days).The data is returned as a Forecast Object.Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.", "parameters": {"type": "object", "properties": {"q": {"type": "string", "description": "Query parameter based on which data is sent back. It could be following:1.Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508\n2.city name e.g.: q=Paris\n3.US zip e.g.: q=10001\n4.UK postcode e.g: q=SW1\n5.Canada postal code e.g: q=G2J\n6.metar:<metar code> e.g: q=metar:EGLL\n7.iata:<3 digit airport code> e.g: q=iata:DXB\n8.auto:ip IP lookup e.g: q=auto:ip\n9.IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1."}, "api_key": {"type": "string", "description": "API Key."}, "lang": {"type": "string", "description": "Returns 'condition:text' field in API in the desired language."}, "dt": {"type": "string", "description": "Restrict date output for Forecast and History API method.For history API 'dt' should be on or after 1st Jan, 2010 in yyyy-MM-dd format (i.e. dt=2010-01-01)."}, "unixdt": {"type": "string", "description": "Unix Timestamp used by Forecast and History API method.Same function as dt.Unixdt has same restriction as 'dt' parameter. Please either pass 'dt' or 'unixdt' and not both in same request. e.g.: unixdt=1490227200."}, "end_dt": {"type": "string", "description": "Restrict date output for History API method.For history API 'end_dt' should be on or after 1st Jan, 2010 in yyyy-MM-dd format (i.e. dt=2010-01-01).'end_dt' should be greater than 'dt' parameter and difference should not be more than 30 days between the two dates.Only works for API on Pro plan and above."}, "endunix_dt": {"type": "string", "description": "Unix Timestamp used by History API method.unixend_dt has same restriction as 'end_dt' parameter. Please either pass 'end_dt' or 'unixend_dt' and not both in same request. e.g.: unixend_dt=1490227200."}, "tp": {"type": "string", "description": "Get 15 min interval data for Forecast and History API. Available for Enterprise clients only."}, "hour": {"type": "string", "description": "Restricting forecast or history output to a specific hour in a given day.Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6."}}, "required": ["q", "dt"]}}, {"name": "marine", "description": "Marine weather API method returns up to next 7 day (depending upon your price plan level,free plan is next three day and cannot enable the tide data.) marine and sailing weather forecast and tide data (depending upon your price plan level) as json or xml. The data is returned as a Marine Object.Marine object, depending upon your price plan level, contains astronomy data, day weather forecast and hourly interval weather information and tide data for a given sea/ocean point.", "parameters": {"type": "object", "properties": {"q": {"type": "string", "description": "Query parameter based on which data is sent back. It could be following:1.Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508\n2.city name e.g.: q=Paris\n3.US zip e.g.: q=10001\n4.UK postcode e.g: q=SW1\n5.Canada postal code e.g: q=G2J\n6.metar:<metar code> e.g: q=metar:EGLL\n7.iata:<3 digit airport code> e.g: q=iata:DXB\n8.auto:ip IP lookup e.g: q=auto:ip\n9.IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1."}, "api_key": {"type": "string", "description": "API Key."}, "lang": {"type": "string", "description": "Returns 'condition:text' field in API in the desired language."}, "tide": {"type": "string", "description": "Enable/Disable Tide data in Marine API output.(Only pro+ and above can enable.)"}}, "required": ["q"]}}, {"name": "future", "description": "Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 300 days from today in the future.", "parameters": {"type": "object", "properties": {"q": {"type": "string", "description": "Query parameter based on which data is sent back. It could be following:1.Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508\n2.city name e.g.: q=Paris\n3.US zip e.g.: q=10001\n4.UK postcode e.g: q=SW1\n5.Canada postal code e.g: q=G2J\n6.metar:<metar code> e.g: q=metar:EGLL\n7.iata:<3 digit airport code> e.g: q=iata:DXB\n8.auto:ip IP lookup e.g: q=auto:ip\n9.IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1."}, "dt": {"type": "string", "description": "Restrict date output for Forecast and History API method.For future API 'dt' should be between 14 days and 300 days from today in the future in yyyy-MM-dd format (i.e. dt=2023-01-01)."}, "api_key": {"type": "string", "description": "API Key."}, "lang": {"type": "string", "description": "Returns 'condition:text' field in API in the desired language."}}, "required": ["q", "dt"]}}, {"name": "search", "description": "Returns matching cities and towns as an array of Location object. ", "parameters": {"type": "object", "properties": {"q": {"type": "string", "description": "Query parameter based on which data is sent back. It could be following:1.Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508\n2.city name e.g.: q=Paris\n3.US zip e.g.: q=10001\n4.UK postcode e.g: q=SW1\n5.Canada postal code e.g: q=G2J\n6.metar:<metar code> e.g: q=metar:EGLL\n7.iata:<3 digit airport code> e.g: q=iata:DXB\n8.auto:ip IP lookup e.g: q=auto:ip\n9.IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1."}, "api_key": {"type": "string", "description": "API Key."}, "lang": {"type": "string", "description": "Returns 'condition:text' field in API in the desired language."}}, "required": ["q"]}}, {"name": "ip_lookup", "description": "IP Lookup API method allows a user to get up to date information for an IP address in json and xml. ", "parameters": {"type": "object", "properties": {"q": {"type": "string", "description": "Query parameter based on which data is sent back. It could be following:1.Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508\n2.city name e.g.: q=Paris\n3.US zip e.g.: q=10001\n4.UK postcode e.g: q=SW1\n5.Canada postal code e.g: q=G2J\n6.metar:<metar code> e.g: q=metar:EGLL\n7.iata:<3 digit airport code> e.g: q=iata:DXB\n8.auto:ip IP lookup e.g: q=auto:ip\n9.IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1."}, "api_key": {"type": "string", "description": "API Key."}, "lang": {"type": "string", "description": "Returns 'condition:text' field in API in the desired language."}}, "required": ["q"]}}, {"name": "astronomy_info", "description": "Get up to date information for sunrise, sunset, moonrise, moonset, moon phase and illumination in json.", "parameters": {"type": "object", "properties": {"q": {"type": "string", "description": "Query parameter based on which data is sent back. It could be following:1.Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508\n2.city name e.g.: q=Paris\n3.US zip e.g.: q=10001\n4.UK postcode e.g: q=SW1\n5.Canada postal code e.g: q=G2J\n6.metar:<metar code> e.g: q=metar:EGLL\n7.iata:<3 digit airport code> e.g: q=iata:DXB\n8.auto:ip IP lookup e.g: q=auto:ip\n9.IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1."}, "api_key": {"type": "string", "description": "API Key."}, "lang": {"type": "string", "description": "Returns 'condition:text' field in API in the desired language."}}, "required": ["q"]}}, {"name": "time_zone", "description": "get up to date time zone and local time information in json.", "parameters": {"type": "object", "properties": {"q": {"type": "string", "description": "Query parameter based on which data is sent back. It could be following:1.Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508\n2.city name e.g.: q=Paris\n3.US zip e.g.: q=10001\n4.UK postcode e.g: q=SW1\n5.Canada postal code e.g: q=G2J\n6.metar:<metar code> e.g: q=metar:EGLL\n7.iata:<3 digit airport code> e.g: q=iata:DXB\n8.auto:ip IP lookup e.g: q=auto:ip\n9.IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1."}, "api_key": {"type": "string", "description": "API Key."}, "lang": {"type": "string", "description": "Returns 'condition:text' field in API in the desired language."}}, "required": ["q"]}}, {"name": "sports", "description": "Get listing of all upcoming sports events for football, cricket and golf in json(regarless of the query).", "parameters": {"type": "object", "properties": {"q": {"type": "string", "description": "Query parameter based on which data is sent back. It could be following:1.Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508\n2.city name e.g.: q=Paris\n3.US zip e.g.: q=10001\n4.UK postcode e.g: q=SW1\n5.Canada postal code e.g: q=G2J\n6.metar:<metar code> e.g: q=metar:EGLL\n7.iata:<3 digit airport code> e.g: q=iata:DXB\n8.auto:ip IP lookup e.g: q=auto:ip\n9.IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1."}, "api_key": {"type": "string", "description": "API Key."}, "lang": {"type": "string", "description": "Returns 'condition:text' field in API in the desired language."}}, "required": ["q"]}}, {"name": "ask_to_user", "description": "You can ask user for guidance when you think you need more information to handle the task, but you should use this tool as less as you can.", "parameters": {"type": "object", "properties": {"question": {"type": "string", "description": "The question you want to ask to user."}}, "required": ["question"]}}, {"name": "finish", "description": "Finish the task and give your answer.", "parameters": {"type": "object", "properties": {"answer": {"type": "string", "description": "Your answer for the task."}}, "required": ["answer"]}}]